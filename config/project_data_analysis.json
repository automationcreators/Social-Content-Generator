{
  "collection_date": "2025-10-28T14:37:51.921016",
  "projects": {
    "Demo": {
      "name": "Demo",
      "path": "/Users/elizabethknopf/Documents/claudec/active/Demo",
      "file_count": 3,
      "file_types": {
        ".md": 1,
        ".txt": 1,
        ".py": 1
      },
      "has_agents": false,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "Python"
      ],
      "purpose": "Fetches transcripts from Google Drive, analyzes them, and creates summary documents.",
      "interesting_files": [],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [
          "Fetches transcripts from Google Drive, analyzes them, and creates summary documents.",
          "Initialize Google Drive and Docs API services",
          "List all files in a Google Drive folder",
          "Download content from a Google Drive file",
          "Analyze transcript using Claude API",
          "Create a new Google Doc with the analyzed content",
          "Format the analysis into a readable document",
          "TRANSCRIPT ANALYSIS: {filename}",
          "Main workflow: process all transcripts in folder"
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "promptSaver": {
      "name": "promptSaver",
      "path": "/Users/elizabethknopf/Documents/claudec/active/promptSaver",
      "file_count": 64,
      "file_types": {
        ".md": 18,
        ".json": 6,
        ".js": 6,
        ".html": 2,
        ".zip": 1,
        ".ts": 11,
        ".css": 4,
        ".png": 8,
        ".svg": 2,
        ".tsx": 6
      },
      "has_agents": false,
      "has_automation": true,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Prompt Vault",
      "interesting_files": [
        {
          "file": "background.js",
          "type": "automation"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [],
        "guides": [
          {
            "type": "step",
            "content": "**Download the latest release**"
          },
          {
            "type": "step",
            "content": "**Pin the extension** (recommended)"
          },
          {
            "type": "step",
            "content": "Navigate to `chrome://extensions/`"
          },
          {
            "type": "step",
            "content": "Make changes to the code and click the refresh icon on the extension card"
          },
          {
            "type": "step",
            "content": "Navigate to any supported platform (Claude, ChatGPT, Gemini, etc.)"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "vendor-quote-tool": {
      "name": "vendor-quote-tool",
      "path": "/Users/elizabethknopf/Documents/claudec/active/vendor-quote-tool",
      "file_count": 52,
      "file_types": {
        ".md": 8,
        ".json": 4,
        ".html": 1,
        ".tsx": 10,
        ".css": 1,
        ".txt": 1,
        "": 1,
        ".example": 1,
        ".py": 25
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": true,
      "tech_stack": [
        "Python",
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Vendor Quote Collection Tool",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Get all vendors for a specific project",
          "Get all responses for a specific vendor",
          "Get all responses for a specific outreach attempt",
          "Get all outreach attempts for a specific campaign",
          "Get all outreach attempts for a specific vendor",
          "Get a specific outreach attempt",
          "Get all campaigns for a specific project",
          "Search for vendors using multiple platforms (Google Places, Yelp)",
          "Test endpoint to verify search functionality with sample data"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Create virtual environment**:"
          },
          {
            "type": "step",
            "content": "Add tests for new functionality"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "YouTubeRAG": {
      "name": "YouTubeRAG",
      "path": "/Users/elizabethknopf/Documents/claudec/active/YouTubeRAG",
      "file_count": 57,
      "file_types": {
        ".md": 7,
        ".py": 30,
        ".txt": 1,
        ".ini": 1,
        ".json": 3,
        "": 1,
        ".example": 1,
        ".db": 1,
        ".html": 1,
        ".js": 4,
        ".css": 1,
        ".sqlite3": 1,
        ".bin": 4,
        ".mako": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python",
        "JavaScript/React",
        "Web"
      ],
      "purpose": "YouTube RAG Chat",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Detailed test for YouTube transcript API with fallbacks",
          "Test all services initialization",
          "Test each service initialization",
          "Easy-to-use client for accessing YouTubeRAG service from other projects.",
          "from YouTubeRAG.youtube_rag_client import YouTubeRAGClient",
          "A single segment of a transcript with timestamp",
          "Complete transcript for a video",
          "Client for interacting with YouTubeRAG service",
          "base_url: Base URL of YouTubeRAG API (default: http://localhost:3011)"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Add tests for new functionality"
          },
          {
            "type": "step",
            "content": "**FastAPI Service** (Port 3011)"
          },
          {
            "type": "step",
            "content": "\"How I Make $5M/Year Working Only 4hrs a Day\" - 25 chunks"
          },
          {
            "type": "step",
            "content": "\"Al Engineering 101 with Chip Huyen\" - 78 chunks"
          },
          {
            "type": "step",
            "content": "**`dirTechStack/integrations/youtube_transcript_service.py`**"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "dirKidSports": {
      "name": "dirKidSports",
      "path": "/Users/elizabethknopf/Documents/claudec/active/dirKidSports",
      "file_count": 146,
      "file_types": {
        ".md": 8,
        ".js": 46,
        ".local": 1,
        ".ts": 20,
        ".json": 22,
        "": 3,
        ".example": 1,
        ".sql": 1,
        ".prisma": 1,
        ".db": 1,
        ".gz": 10,
        ".old": 2,
        ".css": 2,
        ".woff2": 7,
        ".tsx": 21
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React"
      ],
      "purpose": "Kids Directory Arizona",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "complex",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Set up environment variables**"
          },
          {
            "type": "step",
            "content": "**API Integration**: Automated collection from public APIs"
          },
          {
            "type": "step",
            "content": "**Web Scraping**: Ethical scraping with rate limiting and robots.txt compliance"
          },
          {
            "type": "step",
            "content": "**Data Normalization**: Standardization of addresses, phone numbers, categories"
          },
          {
            "type": "step",
            "content": "**Duplicate Detection**: Fuzzy matching to prevent duplicate listings"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "Project Management": {
      "name": "Project Management",
      "path": "/Users/elizabethknopf/Documents/claudec/active/Project Management",
      "file_count": 61,
      "file_types": {
        ".py": 3,
        ".md": 24,
        ".json": 14,
        ".js": 7,
        ".html": 5,
        ".css": 4,
        ".template": 4
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": true,
      "tech_stack": [
        "Python",
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Claude Code Project Management System",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": "agents.js",
          "type": "agent"
        },
        {
          "file": "agents.css",
          "type": "agent"
        },
        {
          "file": "agents-tab.html",
          "type": "agent"
        },
        {
          "file": "AGENT_INTEGRATION_GUIDE.md",
          "type": "agent"
        },
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": "systems-agent-data.json",
          "type": "agent"
        },
        {
          "file": "agent-data.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Personal OS Project Bootstrapper",
          "Simple MVP for creating new projects with templates and rules",
          "Interactive selection of idea from backlog",
          "Analyze project complexity and estimate resources",
          "Automatically classify security level based on content",
          "Generate strategy for dividing work between Claude and n8n",
          "Create project from idea using templates and rules",
          "Main function to bootstrap a new project",
          "Claude Code Project Management System"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Add Ideas**: Capture project concepts as they come to you"
          },
          {
            "type": "step",
            "content": "**Rate Impact**: Score ideas on personal value (1-10 scale)"
          },
          {
            "type": "step",
            "content": "**View Priorities**: See auto-ranked list based on impact vs effort"
          },
          {
            "type": "step",
            "content": "**Select Projects**: Move high-priority ideas to development"
          },
          {
            "type": "step",
            "content": "**Track Progress**: Use generated project templates for development"
          }
        ],
        "tips": [],
        "stories": [
          {
            "type": "transformation",
            "before": "TODO.md text was barely visible (light gray on light background)\n   - \u2705",
            "after": "Enhanced markdown parser with proper black text styling\n   - \u2705 Result: All text now clearly visible with white background"
          }
        ],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "UsageDash": {
      "name": "UsageDash",
      "path": "/Users/elizabethknopf/Documents/claudec/active/UsageDash",
      "file_count": 364,
      "file_types": {
        ".md": 7,
        ".json": 69,
        ".mjs": 2,
        ".ts": 9,
        "": 3,
        ".prisma": 1,
        ".db": 1,
        ".toml": 1,
        ".sql": 1,
        ".js": 132,
        ".map": 109,
        ".css": 5,
        ".woff2": 6,
        ".ico": 2,
        ".svg": 5,
        ".tsx": 11
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": true,
      "tech_stack": [
        "JavaScript/React"
      ],
      "purpose": "[1-10] - [New skills or knowledge gained]",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "complex",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "legiscraper": {
      "name": "legiscraper",
      "path": "/Users/elizabethknopf/Documents/claudec/active/legiscraper",
      "file_count": 24,
      "file_types": {
        ".py": 7,
        ".txt": 1,
        ".html": 2,
        ".md": 7,
        ".json": 4,
        ".csv": 3
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": true,
      "tech_stack": [
        "Python",
        "Web"
      ],
      "purpose": "[1-10] - [New skills or knowledge gained]",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Quick validation test for enriched scraper - small sample only",
          "Test with minimal data to validate functionality.",
          "Working Enriched Idaho Legislature Scraper",
          "Simplified but functional version that adds committee and legislation data",
          "Enhanced legislator data structure.",
          "Simplified but working enriched scraper.",
          "Get a sample of legislators using a simplified approach.",
          "Based on the documented 99% success rate approach.",
          "Get sample committee data to demonstrate enrichment."
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "tradingplan": {
      "name": "tradingplan",
      "path": "/Users/elizabethknopf/Documents/claudec/active/tradingplan",
      "file_count": 5,
      "file_types": {
        ".pdf": 5
      },
      "has_agents": false,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [],
      "purpose": "",
      "interesting_files": [],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "ppp data": {
      "name": "ppp data",
      "path": "/Users/elizabethknopf/Documents/claudec/active/ppp data",
      "file_count": 5,
      "file_types": {
        ".xlsx": 1,
        ".md": 3,
        ".json": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [],
      "purpose": "[1-10] - [New skills or knowledge gained]",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "data cleanup": {
      "name": "data cleanup",
      "path": "/Users/elizabethknopf/Documents/claudec/active/data cleanup",
      "file_count": 14,
      "file_types": {
        ".csv": 10,
        ".md": 3,
        ".json": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [],
      "purpose": "[1-10] - [New skills or knowledge gained]",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "smart-image-editor": {
      "name": "smart-image-editor",
      "path": "/Users/elizabethknopf/Documents/claudec/active/smart-image-editor",
      "file_count": 63,
      "file_types": {
        ".md": 8,
        ".json": 14,
        ".ico": 2,
        ".html": 2,
        ".png": 4,
        ".txt": 3,
        ".map": 3,
        ".css": 3,
        ".js": 8,
        ".tsx": 7,
        ".ts": 6,
        ".svg": 1,
        "": 1,
        ".example": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Smart Image Editor & Combiner",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Clone and install dependencies:**"
          },
          {
            "type": "step",
            "content": "**Set up environment variables:**"
          },
          {
            "type": "step",
            "content": "Go to [Google AI Studio](https://aistudio.google.com/)"
          },
          {
            "type": "step",
            "content": "Add it to your `.env` file as `GEMINI_API_KEY`"
          },
          {
            "type": "step",
            "content": "Go to [Cloudinary](https://cloudinary.com/) and create a free account"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "AIBrain": {
      "name": "AIBrain",
      "path": "/Users/elizabethknopf/Documents/claudec/active/AIBrain",
      "file_count": 142,
      "file_types": {
        ".md": 24,
        ".py": 29,
        ".txt": 3,
        ".textclipping": 1,
        "": 2,
        ".example": 1,
        ".pickle": 2,
        ".zip": 2,
        ".sql": 1,
        ".db": 2,
        ".yaml": 2,
        ".json": 7,
        ".js": 6,
        ".html": 2,
        ".ts": 11,
        ".css": 4,
        ".png": 8,
        ".svg": 2,
        ".tsx": 6,
        ".sh": 1,
        ".docx": 23,
        ".pdf": 2,
        ".csv": 1
      },
      "has_agents": false,
      "has_automation": true,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python",
        "JavaScript/React",
        "Web"
      ],
      "purpose": "AI Brain Knowledge System",
      "interesting_files": [
        {
          "file": "background.js",
          "type": "automation"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "complex",
      "rich_content": {
        "insights": [
          "Web interface for AI Brain Knowledge System",
          "Run this to access your indexed files via browser at localhost:9000",
          "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
          "<title>AI Brain Knowledge System</title>",
          "Found {results['count']} results in {results['execution_time_ms']:.2f}ms",
          "<a href=\"{file.get('url', '#')}\" target=\"_blank\">{file.get('name', 'Untitled')}</a>",
          "<span>\ud83d\udcc5 Modified: {modified}</span>",
          "<p>Try a different search term</p>",
          "<div class=\"results-info\">Showing most recently modified files</div>",
          "<div class=\"results-info\">Most frequently used tags</div>"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Install dependencies: `pip install -r requirements.txt`"
          },
          {
            "type": "step",
            "content": "Copy `.env.example` to `.env` and add your credentials"
          },
          {
            "type": "step",
            "content": "Run initial indexing: `python -m indexer.crawler`"
          },
          {
            "type": "step",
            "content": "Start API server: `python -m api.discovery_api`"
          },
          {
            "type": "step",
            "content": "1. Install dependencies: `pip install -r requirements.txt`\n2. Copy `.env.example` to `.env` and add your credentials\n3. Run initial indexing: `python -m indexer.crawler`\n4. Start API server: `python -m api.discovery_api`"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "n8n bulk": {
      "name": "n8n bulk",
      "path": "/Users/elizabethknopf/Documents/claudec/active/n8n bulk",
      "file_count": 147,
      "file_types": {
        ".md": 8,
        ".py": 7,
        "": 2,
        ".json": 114,
        ".sh": 2,
        ".js": 2,
        ".html": 1,
        ".tsx": 6,
        ".css": 1,
        ".ts": 2,
        ".txt": 1,
        ".db": 1
      },
      "has_agents": true,
      "has_automation": true,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python",
        "JavaScript/React",
        "Web"
      ],
      "purpose": "[1-10] - [New skills or knowledge gained]",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": "4cXMS9U9n9DpLNDv-Claude_AI_Agent_Web_Search.json",
          "type": "agent"
        },
        {
          "file": "D0P8tDYjEbOse7cH-Demo_Agent_MCP.json",
          "type": "agent"
        },
        {
          "file": "G6N7YTGptQ4n8SCc-AI_Content_Agent.json",
          "type": "agent"
        },
        {
          "file": "zHSuod6hCrRpictr-Host_Your_Own_AI_Deep_Research_Agent_with_n8n_Apify_and_OpenAI_o3.json",
          "type": "agent"
        },
        {
          "file": "fKLjZ06BaFHlST89-lawn_ai_agent.json",
          "type": "agent"
        },
        {
          "file": "bEztU8VggF8oxclW-Jenny_Multi_Agent.json",
          "type": "agent"
        },
        {
          "file": "BC5JzIgRr2eAp8bS-newsletter_automation.json",
          "type": "automation"
        },
        {
          "file": "DzLtpvoeHXo48ckU-mcp_agent_MCP_CLient.json",
          "type": "agent"
        },
        {
          "file": "dct1TpDhYZtkxsy5-MultiAgent.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "complex",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Clean workflow data to only include essential properties",
          "Main function to import all workflows",
          "Sync all workflows from n8n instance",
          "Get workflows with filtering and search",
          "Get detailed workflow information",
          "Get list of all tools used across workflows",
          "Import a single workflow JSON file",
          "Analyze n8n workflows to extract metadata, detect tools, and find relationships",
          "Comprehensive analysis of a single workflow"
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "ad-variations-generator": {
      "name": "ad-variations-generator",
      "path": "/Users/elizabethknopf/Documents/claudec/active/ad-variations-generator",
      "file_count": 35,
      "file_types": {
        ".md": 7,
        ".js": 13,
        ".local": 1,
        ".json": 5,
        ".example": 1,
        ".ico": 1,
        ".html": 1,
        ".png": 2,
        ".txt": 1,
        ".css": 2,
        ".svg": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Batch Ad Variations Generator",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Add environment variables in Vercel dashboard"
          },
          {
            "type": "step",
            "content": "**Upload**: Drag & drop your base image or use quick demo samples"
          },
          {
            "type": "step",
            "content": "**Configure**: Select parameters to vary and choose quantity (5-20)"
          },
          {
            "type": "step",
            "content": "**Generate**: Create variations with one click"
          },
          {
            "type": "step",
            "content": "Update `parameterOptions` in `ParameterSelection.js`"
          }
        ],
        "tips": [
          "Perfect for Podcast Demos"
        ],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "chromeSkooldwl": {
      "name": "chromeSkooldwl",
      "path": "/Users/elizabethknopf/Documents/claudec/active/chromeSkooldwl",
      "file_count": 35,
      "file_types": {
        ".md": 11,
        ".js": 8,
        ".html": 3,
        ".json": 4,
        ".css": 1,
        ".png": 4,
        ".svg": 4
      },
      "has_agents": true,
      "has_automation": true,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Skool Community Downloader",
      "interesting_files": [
        {
          "file": "background.js",
          "type": "automation"
        },
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Clone or download this repository"
          },
          {
            "type": "step",
            "content": "Open Chrome and navigate to `chrome://extensions/`"
          },
          {
            "type": "step",
            "content": "Enable \"Developer mode\" in the top right"
          },
          {
            "type": "step",
            "content": "Click \"Load unpacked\" and select the extension folder"
          },
          {
            "type": "step",
            "content": "The extension icon will appear in your browser toolbar"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "Personal-OS": {
      "name": "Personal-OS",
      "path": "/Users/elizabethknopf/Documents/claudec/active/Personal-OS",
      "file_count": 39,
      "file_types": {
        ".py": 9,
        ".md": 14,
        ".json": 12,
        ".template": 4
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "Python"
      ],
      "purpose": "[1-10] - [New skills or knowledge gained]",
      "interesting_files": [
        {
          "file": "agents.md",
          "type": "agent"
        },
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Personal OS Project Bootstrapper",
          "Simple MVP for creating new projects with templates and rules",
          "Interactive selection of idea from backlog",
          "Analyze project complexity and estimate resources",
          "Automatically classify security level based on content",
          "Generate strategy for dividing work between Claude and n8n",
          "Create project from idea using templates and rules",
          "Main function to bootstrap a new project",
          "Personal Operating System - Main Launcher"
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "party-directory-platform": {
      "name": "party-directory-platform",
      "path": "/Users/elizabethknopf/Documents/claudec/active/party-directory-platform",
      "file_count": 45,
      "file_types": {
        ".md": 6,
        ".mjs": 2,
        ".ts": 14,
        ".json": 3,
        ".prisma": 1,
        ".svg": 5,
        ".ico": 1,
        ".tsx": 12,
        ".css": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React"
      ],
      "purpose": "\ud83c\udf89 PartyFinder - Birthday Party Directory Platform",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Create your feature branch (`git checkout -b feature/amazing-feature`)"
          },
          {
            "type": "step",
            "content": "Commit your changes (`git commit -m 'Add amazing feature'`)"
          },
          {
            "type": "step",
            "content": "Push to the branch (`git push origin feature/amazing-feature`)"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "ContentGen": {
      "name": "ContentGen",
      "path": "/Users/elizabethknopf/Documents/claudec/active/ContentGen",
      "file_count": 60,
      "file_types": {
        ".txt": 1,
        ".md": 12,
        "": 1,
        ".json": 3,
        ".css": 1,
        ".js": 1,
        ".html": 12,
        ".py": 26,
        ".pkl": 1,
        ".csv": 1,
        ".db": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python",
        "JavaScript/React",
        "Web"
      ],
      "purpose": "ContentGen - Content Idea Repository & RSS System",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "Content ideas page with filtering",
          "Search content ideas API endpoint",
          "Trigger collection from all sources",
          "Remove RSS source by index - handles both rss_feeds and news_sites",
          "Get list of available sources for filtering",
          "Get all content sources with mute status",
          "Get a specific collection with its items",
          "Add all content from a channel to collection",
          "N8N endpoint to get content with advanced filtering",
          "N8N endpoint to get all content from a specific channel"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Clone and navigate to the project**"
          },
          {
            "type": "step",
            "content": "**Configure sources (optional)**"
          },
          {
            "type": "step",
            "content": "**Set up YouTube API (optional)**"
          },
          {
            "type": "step",
            "content": "Enter name, RSS URL, category, and priority"
          },
          {
            "type": "step",
            "content": "Enter channel name, URL, and settings"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "FastAPI",
          "Flask",
          "Python",
          "PostgreSQL",
          "JavaScript",
          "AI"
        ],
        "business_impact": []
      }
    },
    "Social-Content-Generator": {
      "name": "Social-Content-Generator",
      "path": "/Users/elizabethknopf/Documents/claudec/active/Social-Content-Generator",
      "file_count": 89,
      "file_types": {
        ".md": 14,
        ".txt": 2,
        ".py": 18,
        ".json": 50,
        ".csv": 2,
        ".pdf": 1,
        ".sh": 1,
        ".pickle": 1
      },
      "has_agents": true,
      "has_automation": true,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python"
      ],
      "purpose": "Social Content Generator",
      "interesting_files": [
        {
          "file": "research_data_agent.py",
          "type": "agent"
        },
        {
          "file": "weekly_progress_agent.py",
          "type": "agent"
        },
        {
          "file": "context_summary_agent.py",
          "type": "agent"
        },
        {
          "file": "agent_framework.py",
          "type": "agent"
        },
        {
          "file": "setup_daily_automation.sh",
          "type": "automation"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "Finds statistics, reports, charts, and data to support content ideas",
          "Supports both quick stats and deep research modes",
          "Find and validate supporting data for content ideas",
          "Quick research mode - find 3-5 key statistics",
          "Uses pre-existing knowledge and common statistics",
          "Deep research mode - comprehensive data gathering",
          "Finds reports, case studies, multiple sources",
          "Get quick statistics for common topics",
          "Get comprehensive research for topic",
          "Research data for a specific content idea"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Scans RSS feeds** for trending AI/business topics from ContentGen database"
          },
          {
            "type": "step",
            "content": "**Researches supporting data** - finds statistics, reports, and credibility markers"
          },
          {
            "type": "step",
            "content": "**Generates multiple angles** - professional, spicy/contrarian, and balanced variations"
          },
          {
            "type": "step",
            "content": "**Fuses with personal projects** - connects trends to your real work examples"
          },
          {
            "type": "step",
            "content": "**Syncs to Google Sheets** - ready-to-post content with date tracking"
          }
        ],
        "tips": [],
        "stories": [
          {
            "type": "transformation",
            "before": "** ContentGen database is stale\n\n**",
            "after": "**\n```bash\ncd /Users/elizabethknopf/Documents/claudec/active/ContentGen\npython3 backend/app.py\n# Access http://localhost:5000 to trigger RSS collection\n```"
          },
          {
            "type": "transformation",
            "before": "Manual context switching cost 2 hours daily\n\u2022 Traditional approach: Writing documentation no one reads\n\u2022 My",
            "after": "CLAUDE.md pattern with structured context\n\u2022 Implementation: 3 context files, 200 lines of project knowledge\n\u2022 Results: 60% faster session onboarding, zero repetitive explanations\n\u2022 How to apply: Start with your most-used project"
          }
        ],
        "problems_solved": [
          {
            "problem": "** ContentGen database is stale\n\n**",
            "solution": "**\n```bash\ncd /Users/elizabethknopf/Documents/claudec/active/ContentGen\npython3 backend/app.py\n# Access http://localhost:5000 to trigger RSS collection\n```"
          },
          {
            "problem": "** Emojis appearing in pillar content\n\n**",
            "solution": "** Fixed in pillar_content_generator.py (Oct 26 update)"
          },
          {
            "problem": "** Wrong Python path\n\n**",
            "solution": "** Verify Python path in setup_daily_automation.sh\n```bash\nwhich python3  # Should be /usr/bin/python3\n```"
          }
        ],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "mapmaker": {
      "name": "mapmaker",
      "path": "/Users/elizabethknopf/Documents/claudec/active/mapmaker",
      "file_count": 72,
      "file_types": {
        ".md": 7,
        "": 2,
        ".example": 1,
        ".json": 7,
        ".bak": 1,
        ".ico": 1,
        ".html": 1,
        ".png": 20,
        ".txt": 1,
        ".tsx": 8,
        ".css": 2,
        ".ts": 6,
        ".svg": 1,
        ".js": 9,
        ".sql": 2,
        ".old": 3
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Property Mapping Tool",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Go to [Google Cloud Console](https://console.cloud.google.com)"
          },
          {
            "type": "step",
            "content": "Navigate to \"APIs & Services\" > \"Credentials\""
          },
          {
            "type": "step",
            "content": "Click \"Create Credentials\" > \"OAuth 2.0 Client IDs\""
          },
          {
            "type": "step",
            "content": "Set Application Type to \"Web application\""
          },
          {
            "type": "step",
            "content": "Add these **Authorized redirect URIs**:"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "DataMapping": {
      "name": "DataMapping",
      "path": "/Users/elizabethknopf/Documents/claudec/active/DataMapping",
      "file_count": 0,
      "file_types": {},
      "has_agents": false,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [],
      "purpose": "",
      "interesting_files": [],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "HOA": {
      "name": "HOA",
      "path": "/Users/elizabethknopf/Documents/claudec/active/HOA",
      "file_count": 14,
      "file_types": {
        ".md": 5,
        ".txt": 1,
        ".py": 6,
        ".json": 2
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python"
      ],
      "purpose": "HOA Management Certificate Data Extractor",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Test script for HOA data pipeline",
          "Tests with a small dataset (Lubbock county)",
          "PDF Parser for HOA Management Certificates",
          "Extracts signatory names, titles, and contact information",
          "Parses HOA management certificates to extract key information",
          "Initialize parser with regex patterns",
          "Extract signatory information (names and titles)",
          "List of dictionaries with 'name' and 'title' keys",
          "Extract all email addresses from text"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Fetch first 3 HOAs from Lubbock"
          },
          {
            "type": "step",
            "content": "Parse names, titles, and contact info"
          },
          {
            "type": "step",
            "content": "Save to database at `data/hoa.db`"
          },
          {
            "type": "step",
            "content": "**Scale Up**: Process all Texas counties"
          },
          {
            "type": "step",
            "content": "**Monitoring**: Set up cron job to check for new uploads"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "ragYT": {
      "name": "ragYT",
      "path": "/Users/elizabethknopf/Documents/claudec/active/ragYT",
      "file_count": 0,
      "file_types": {},
      "has_agents": false,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [],
      "purpose": "",
      "interesting_files": [],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "xspaces": {
      "name": "xspaces",
      "path": "/Users/elizabethknopf/Documents/claudec/active/xspaces",
      "file_count": 5,
      "file_types": {
        ".md": 4,
        ".json": 1
      },
      "has_agents": false,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [],
      "purpose": "X Spaces Auto-Transcriber",
      "interesting_files": [],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [],
        "guides": [
          {
            "type": "step",
            "content": "\u23f3 Research existing download tools (yt-dlp, GitHub repos)"
          },
          {
            "type": "step",
            "content": "\u23f3 Integrate local Whisper transcription"
          },
          {
            "type": "step",
            "content": "\u23f3 Integrate Gemini summarization"
          },
          {
            "type": "step",
            "content": "Read context.md for full project context"
          },
          {
            "type": "step",
            "content": "Check log.md for latest session notes"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "scrapers": {
      "name": "scrapers",
      "path": "/Users/elizabethknopf/Documents/claudec/active/scrapers",
      "file_count": 44,
      "file_types": {
        ".py": 35,
        ".txt": 1,
        ".json": 3,
        ".md": 4,
        ".html": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python",
        "Web"
      ],
      "purpose": "Scrapers - Intelligent Web Scraping Toolkit",
      "interesting_files": [
        {
          "file": "scraping_agent.py",
          "type": "agent"
        },
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": "test_scraping_agent.py",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "Flask server for the enhanced project management web UI",
          "API endpoint to get all tasks with enhanced data",
          "Update task status via drag and drop",
          "Get comprehensive project statistics",
          "Get available project templates",
          "Preview tasks that would be created from a template",
          "Get rules for a specific category",
          "Validate task completion against rules",
          "Initialize with sample data if no tasks exist",
          "Configuration management for the scrapers package."
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Respect robots.txt**: The package checks robots.txt by default"
          },
          {
            "type": "step",
            "content": "**Use appropriate delays**: Configure rate limiting based on target site"
          },
          {
            "type": "step",
            "content": "**Handle failures gracefully**: Always check `result.success` before accessing data"
          },
          {
            "type": "step",
            "content": "**Use API when available**: APIs are more reliable than scraping"
          },
          {
            "type": "step",
            "content": "**Monitor performance**: Track success rates and adjust strategies"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "OwnerScraper": {
      "name": "OwnerScraper",
      "path": "/Users/elizabethknopf/Documents/claudec/active/OwnerScraper",
      "file_count": 761,
      "file_types": {
        ".md": 68,
        ".json": 36,
        ".py": 212,
        ".csv": 425,
        ".sh": 2,
        ".xls": 1,
        ".log": 1,
        ".txt": 9,
        "": 3,
        ".xlsx": 2,
        ".js": 2
      },
      "has_agents": true,
      "has_automation": true,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python",
        "JavaScript/React"
      ],
      "purpose": "Task 5 Alternative: Use WebSearch to find business owner information",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        },
        {
          "file": "N8N_AUTOMATION_WORKFLOW.json",
          "type": "automation"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "complex",
      "rich_content": {
        "insights": [
          "Task 5 Alternative: Use WebSearch to find business owner information",
          "Since Sunbiz blocks automated access, we'll use web search to find:",
          "Update CSV with Batch 23 WebSearch results",
          "Update CSV with Batch 17 WebSearch results",
          "Phase 3D - Georgia Secretary of State Lookup",
          "Searches GA SOS database for business owners, registered agents, and officers.",
          "Clean business name for searching.",
          "Search Georgia Secretary of State for a business.",
          "Returns list of contacts found (registered agents, officers, etc.)",
          "Enrich Georgia businesses with SOS data."
        ],
        "guides": [
          {
            "type": "step",
            "content": "Email scraping (high success rate)"
          },
          {
            "type": "step",
            "content": "State registries (reliable, official data)"
          },
          {
            "type": "step",
            "content": "Yelp (lower success but still valuable)"
          },
          {
            "type": "step",
            "content": "**Merge all results** into final output file"
          },
          {
            "type": "step",
            "content": "**Validate data quality** - spot check names"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Claude"
        ],
        "business_impact": []
      }
    },
    "JoblistingsAnalysis": {
      "name": "JoblistingsAnalysis",
      "path": "/Users/elizabethknopf/Documents/claudec/active/JoblistingsAnalysis",
      "file_count": 134,
      "file_types": {
        ".html": 17,
        ".csv": 59,
        ".py": 35,
        ".json": 9,
        ".md": 7,
        ".png": 6,
        ".js": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": true,
      "tech_stack": [
        "Python",
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Job Market Analysis Dashboard",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "complex",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]",
          "Extract keywords from job titles",
          "Classify job title into industry based on keywords",
          "Analyze content to identify if it lists multiple unrelated jobs",
          "Returns: (is_generic, job_list, analysis)",
          "Check if extracted title matches the assigned category",
          "Calculate the great circle distance between two points on earth in miles",
          "Get approximate coordinates for a city",
          "Find the closest metro area and distance band",
          "Simple HTTP server to serve the interactive job analysis dashboard"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**By State** - Enhanced with top 5 categories and concentration metrics"
          },
          {
            "type": "step",
            "content": "**By Metro Area** - Metropolitan area job market analysis"
          },
          {
            "type": "step",
            "content": "**Metro Concentration** - 50-mile analysis showing regional concentration"
          },
          {
            "type": "step",
            "content": "**Top 20 by Population** - Major metropolitan areas analysis"
          },
          {
            "type": "step",
            "content": "**Top 20 Outside Metros** - Secondary markets with key insights"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "trading": {
      "name": "trading",
      "path": "/Users/elizabethknopf/Documents/claudec/active/trading",
      "file_count": 27,
      "file_types": {
        ".md": 8,
        ".json": 6,
        ".pdf": 3,
        ".pptx": 1,
        ".xls": 1,
        ".js": 3,
        ".png": 4,
        ".html": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React",
        "Web"
      ],
      "purpose": "[1-10] - [New skills or knowledge gained]",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "StateScraper": {
      "name": "StateScraper",
      "path": "/Users/elizabethknopf/Documents/claudec/active/StateScraper",
      "file_count": 1,
      "file_types": {
        ".json": 1
      },
      "has_agents": false,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [],
      "purpose": "",
      "interesting_files": [],
      "recent_activity": null,
      "estimated_complexity": "simple",
      "rich_content": {
        "insights": [],
        "guides": [],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [],
        "business_impact": []
      }
    },
    "dirTechStack": {
      "name": "dirTechStack",
      "path": "/Users/elizabethknopf/Documents/claudec/active/dirTechStack",
      "file_count": 537,
      "file_types": {
        ".md": 31,
        ".supabase": 1,
        ".py": 2,
        ".js": 186,
        ".json": 82,
        ".example": 2,
        ".sql": 8,
        ".toml": 1,
        ".sh": 1,
        ".ts": 31,
        ".local": 1,
        ".mjs": 2,
        "": 2,
        ".map": 139,
        ".css": 8,
        ".woff2": 7,
        ".ico": 2,
        ".svg": 5,
        ".tsx": 26
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": false,
      "tech_stack": [
        "Python",
        "JavaScript/React"
      ],
      "purpose": "9 - Hands-on experience with web scraping, AI content analysis, PostgreSQL, Next.js 15, Supabase",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "complex",
      "rich_content": {
        "insights": [
          "9 - Hands-on experience with web scraping, AI content analysis, PostgreSQL, Next.js 15, Supabase",
          "Process dirTechStack YouTube Playlist via YouTubeRAG Service",
          "DirTechStack Integration with YouTubeRAG Service",
          "================================================",
          "Service for accessing YouTube transcripts for dirTechStack project",
          "Initialize connection to YouTubeRAG service",
          "Process the dirTechStack YouTube playlist",
          "max_videos: Maximum number of videos to process",
          "Wait for playlist processing to complete",
          "job_id: Job ID from process_dirtech_playlist"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Database Migration**: First, apply the migration to add required fields"
          },
          {
            "type": "step",
            "content": "**OpenAI API Key**: Ensure `OPENAI_API_KEY` is set in `.env.local`"
          },
          {
            "type": "step",
            "content": "**Supabase Credentials**: Ensure Supabase credentials are configured"
          },
          {
            "type": "step",
            "content": "Go to your Supabase project dashboard"
          },
          {
            "type": "step",
            "content": "Run the migration from `supabase/migrations/002_add_tool_scraping_fields.sql`:"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "GPT",
          "Claude",
          "Supabase",
          "OpenAI",
          "Python",
          "PostgreSQL",
          "React",
          "ML",
          "AI"
        ],
        "business_impact": []
      }
    },
    "ad-scraper-analyzer": {
      "name": "ad-scraper-analyzer",
      "path": "/Users/elizabethknopf/Documents/claudec/active/ad-scraper-analyzer",
      "file_count": 71,
      "file_types": {
        ".md": 8,
        ".js": 11,
        ".json": 11,
        "": 2,
        ".example": 2,
        ".ico": 2,
        ".html": 2,
        ".png": 4,
        ".txt": 3,
        ".css": 3,
        ".map": 3,
        ".tsx": 8,
        ".ts": 11,
        ".svg": 1
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": true,
      "has_dashboard": true,
      "tech_stack": [
        "JavaScript/React",
        "Web"
      ],
      "purpose": "Ad Scraper & Analyzer",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "Connect your GitHub repository to Vercel"
          },
          {
            "type": "step",
            "content": "Set the environment variable `GEMINI_API_KEY` in Vercel dashboard"
          },
          {
            "type": "step",
            "content": "Select an industry from the dropdown"
          },
          {
            "type": "step",
            "content": "Choose the number of ads to analyze (5-20)"
          },
          {
            "type": "step",
            "content": "View the ad gallery with hover analysis"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    },
    "LeadMag": {
      "name": "LeadMag",
      "path": "/Users/elizabethknopf/Documents/claudec/active/LeadMag",
      "file_count": 28,
      "file_types": {
        ".md": 5,
        ".json": 4,
        ".txt": 2,
        ".js": 8,
        ".css": 1,
        ".ejs": 8
      },
      "has_agents": true,
      "has_automation": false,
      "has_api": false,
      "has_dashboard": false,
      "tech_stack": [
        "JavaScript/React"
      ],
      "purpose": "\ud83e\uddf2 Lead Magnet Generator",
      "interesting_files": [
        {
          "file": ".agent-config.json",
          "type": "agent"
        }
      ],
      "recent_activity": null,
      "estimated_complexity": "moderate",
      "rich_content": {
        "insights": [
          "[1-10] - [New skills or knowledge gained]"
        ],
        "guides": [
          {
            "type": "step",
            "content": "**Audience Input** - Describe your target audience"
          },
          {
            "type": "step",
            "content": "**Pain Point Analysis** - Select the most relevant pain points"
          },
          {
            "type": "step",
            "content": "**Idea Generation** - Choose from personalized lead magnet ideas"
          },
          {
            "type": "step",
            "content": "**Content Creation** - Generate complete lead magnet content"
          },
          {
            "type": "step",
            "content": "**Marketing Assets** - Get landing page copy and email sequences"
          }
        ],
        "tips": [],
        "stories": [],
        "problems_solved": [],
        "tech_stack": [
          "JavaScript",
          "Python",
          "Claude"
        ],
        "business_impact": []
      }
    }
  },
  "aggregate_stats": {
    "total_projects": 33,
    "total_files": 0,
    "total_python_files": 0,
    "total_js_files": 0,
    "projects_with_agents": 0,
    "automation_tools": 0,
    "data_processing_tools": 0,
    "web_apps": 0
  },
  "interesting_findings": [],
  "stories": [],
  "workflows": [],
  "time_savings": [],
  "automation_examples": [],
  "insights": [
    {
      "type": "scale",
      "title": "Building at Scale",
      "stat": "33 active projects",
      "detail": "Managing 3,144 files across diverse projects",
      "hook": "How I manage 33 projects simultaneously with Claude Code"
    },
    {
      "type": "automation",
      "title": "Agent-Driven Architecture",
      "stat": "25 projects with autonomous agents",
      "detail": "Built 49 custom agents",
      "examples": [
        "vendor-quote-tool",
        "YouTubeRAG",
        "dirKidSports"
      ],
      "hook": "Why I replaced scripts with autonomous agents"
    },
    {
      "type": "automation",
      "title": "Automation Infrastructure",
      "stat": "6 automated workflows",
      "detail": "Schedulers, background tasks, and automated processing",
      "examples": [
        "promptSaver",
        "AIBrain",
        "n8n bulk"
      ],
      "hook": "The automation stack that saves me 20 hours/week"
    },
    {
      "type": "data_viz",
      "title": "Data Visualization",
      "stat": "6 custom dashboards",
      "detail": "Real-time monitoring and business intelligence",
      "examples": [
        "vendor-quote-tool",
        "Project Management",
        "UsageDash"
      ],
      "hook": "Building custom dashboards without hiring a dev team"
    },
    {
      "type": "versatility",
      "title": "Multi-Stack Development",
      "stat": "3 technology stacks",
      "detail": "Working across JavaScript/React, Web, Python",
      "hook": "How Claude Code lets me code in any language"
    }
  ],
  "real_examples": [
    {
      "project": "promptSaver",
      "title": "How to: promptSaver",
      "use_case": "step",
      "description": "**Download the latest release**",
      "tech": "JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "vendor-quote-tool",
      "title": "How to: vendor-quote-tool",
      "use_case": "step",
      "description": "**Create virtual environment**:",
      "tech": "Python, JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "YouTubeRAG",
      "title": "How to: YouTubeRAG",
      "use_case": "step",
      "description": "Add tests for new functionality",
      "tech": "Python, JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "dirKidSports",
      "title": "How to: dirKidSports",
      "use_case": "step",
      "description": "**Set up environment variables**",
      "tech": "JavaScript/React",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "Project Management",
      "title": "Claude Code Project Management System",
      "use_case": "transformation",
      "description": "{'type': 'transformation', 'before': 'TODO.md text was barely visible (light gray on light background)\\n   - \u2705', 'after': 'Enhanced markdown parser with proper black text styling\\n   - \u2705 Result: All text now clearly visible with white background'}",
      "tech": "Python, JavaScript/React, Web",
      "category": "stories",
      "business_value": "See description"
    },
    {
      "project": "Project Management",
      "title": "How to: Project Management",
      "use_case": "step",
      "description": "**Add Ideas**: Capture project concepts as they come to you",
      "tech": "Python, JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "smart-image-editor",
      "title": "How to: smart-image-editor",
      "use_case": "step",
      "description": "**Clone and install dependencies:**",
      "tech": "JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "AIBrain",
      "title": "How to: AIBrain",
      "use_case": "step",
      "description": "Install dependencies: `pip install -r requirements.txt`",
      "tech": "Python, JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "ad-variations-generator",
      "title": "How to: ad-variations-generator",
      "use_case": "step",
      "description": "Add environment variables in Vercel dashboard",
      "tech": "JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "chromeSkooldwl",
      "title": "How to: chromeSkooldwl",
      "use_case": "step",
      "description": "Clone or download this repository",
      "tech": "JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "party-directory-platform",
      "title": "How to: party-directory-platform",
      "use_case": "step",
      "description": "Create your feature branch (`git checkout -b feature/amazing-feature`)",
      "tech": "JavaScript/React",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "ContentGen",
      "title": "How to: ContentGen",
      "use_case": "step",
      "description": "**Clone and navigate to the project**",
      "tech": "Python, JavaScript/React, Web",
      "category": "how_to_guides",
      "business_value": "Step-by-step implementation"
    },
    {
      "project": "Social-Content-Generator",
      "title": "Social Content Generator",
      "use_case": "transformation",
      "description": "{'type': 'transformation', 'before': '** ContentGen database is stale\\n\\n**', 'after': '**\\n```bash\\ncd /Users/elizabethknopf/Documents/claudec/active/ContentGen\\npython3 backend/app.py\\n# Access http://localhost:5000 to trigger RSS collection\\n```'}",
      "tech": "Python",
      "category": "stories",
      "business_value": "See description"
    },
    {
      "project": "Social-Content-Generator",
      "title": "Social Content Generator",
      "use_case": "transformation",
      "description": "{'type': 'transformation', 'before': 'Manual context switching cost 2 hours daily\\n\u2022 Traditional approach: Writing documentation no one reads\\n\u2022 My', 'after': 'CLAUDE.md pattern with structured context\\n\u2022 Implementation: 3 context files, 200 lines of project knowledge\\n\u2022 Results: 60% faster session ",
      "tech": "Python",
      "category": "stories",
      "business_value": "See description"
    },
    {
      "project": "Social-Content-Generator",
      "title": "Social-Content-Generator - Problem Solved",
      "use_case": "Problem-Solution",
      "description": "Problem: ** ContentGen database is stale\n\n**\nSolution: **\n```bash\ncd /Users/elizabethknopf/Documents/claudec/active/ContentGen\npython3 backend/app.py\n# Access http://localhost:5000 to trigger RSS collectio",
      "tech": "Python",
      "category": "problem_solving",
      "business_value": "Problem solved efficiently"
    }
  ]
}